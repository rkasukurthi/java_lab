JAVA PROFILE 1.0.1, created Tue Jun 21 14:13:29 2011

Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

%W% %E%

 Copyright (c) 2006 Sun Microsystems, Inc. All  Rights Reserved.

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=5000013f, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=5000016a, id = 200006, name="DestroyJavaVM", group="main")
THREAD END (id = 200006)
TRACE 300039: (thread=200001)
	sun.misc.FDBigInt.mult(FloatingDecimal.java:2568)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:835)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:440)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:678)
TRACE 300035: (thread=200001)
	java.lang.Thread.currentThread(Thread.java:Unknown line)
	java.lang.ThreadLocal.get(ThreadLocal.java:124)
	sun.misc.FloatingDecimal.appendTo(FloatingDecimal.java:970)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:678)
TRACE 300040: (thread=200001)
	gc.ProfileTest.main(ProfileTest.java:27)
TRACE 300036: (thread=200001)
	sun.misc.FDBigInt.quoRemIteration(FloatingDecimal.java:2819)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:834)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:440)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:678)
TRACE 300034: (thread=200001)
	java.util.Hashtable.rehash(Hashtable.java:356)
	java.util.Hashtable.put(Hashtable.java:412)
	gc.ProfileTest.main(ProfileTest.java:32)
TRACE 300041: (thread=200001)
	java.lang.Long.getChars(Long.java:297)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:634)
	java.lang.StringBuffer.append(StringBuffer.java:346)
	gc.ProfileTest.main(ProfileTest.java:31)
CPU SAMPLES BEGIN (total = 9) Tue Jun 21 14:13:29 2011
rank   self  accum   count trace method
   1 22.22% 22.22%       2 300039 sun.misc.FDBigInt.mult
   2 22.22% 44.44%       2 300035 java.lang.Thread.currentThread
   3 22.22% 66.67%       2 300040 gc.ProfileTest.main
   4 11.11% 77.78%       1 300036 sun.misc.FDBigInt.quoRemIteration
   5 11.11% 88.89%       1 300034 java.util.Hashtable.rehash
   6 11.11% 100.00%       1 300041 java.lang.Long.getChars
CPU SAMPLES END
